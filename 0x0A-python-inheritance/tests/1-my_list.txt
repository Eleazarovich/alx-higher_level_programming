1-my_list.py module
===================

using print_sorted
------------------

print_sorted - prints the list in ascending sort

importing the module:
	>>> MyList = __import__("1-my_list").MyList

checking if the output is correct:
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]
	>>> print(my_list)
	[1, 4, 2, 3, 5]

checking correct class type:
	>>> check_type = MyList()
	>>> type(check_type) == MyList
	True
	>>> isinstance(check_type, list)
	True


checking print_sorted is an instance method:
	>>> type(MyList.__dict__["print_sorted"])
	<class 'function'>

checking if more than one arguments were given:
	>>> check_list = MyList()
	>>> check_list.__class__.print_sorted()
	Traceback (most recent call last):
		...
	TypeError: print_sorted() missing 1 required positional argument: 'self'
	
	>>> check_list.print_sorted([122, 4, 0])
	Traceback (most recent call last):
		...
	TypeError: print_sorted() takes 1 positional argument but 2 were given

	>>> empty = MyList()
	>>> empty.print_sorted()
	[]

checking negative numbers:
	>>> check_list = MyList([-3001, -99, -579999, 0, -98167333, -222])
	>>> check_list.print_sorted()
	[-98167333, -579999, -3001, -222, -99, 0]

Original list comparition:
	>>> check_list = MyList([4, 21, 1, -14, 28, 180, 0])
	>>> check_list.print_sorted()
	[-14, 0, 1, 4, 21, 28, 180]
	>>> check_list
	[4, 21, 1, -14, 28, 180, 0]

List already in order:
	>>> check_list = MyList([-16, 0, 1, 5, 10, 32, 200])
	>>> check_list.print_sorted()
	[-16, 0, 1, 5, 10, 32, 200]

	Test append:
	>>> check_list = MyList()
	>>> check_list.append(58)
	>>> check_list
	[58]
